#version 430
#ifdef GL_ARB_compute_variable_group_size
#extension GL_ARB_compute_variable_group_size : enable
#endif
#include <g3dmath.glsl>
#include <Camera/Camera.glsl>

#expect PROJECTION_ALGORITHM "enum"
#define PLANAR     0
#define SPHERICAL  1
#define LENSLET    2

uniform Camera          camera;

layout(local_size_variable) in;

layout(std430, binding = 0) restrict writeonly buffer OriginSSBO {
    vec4 rayOrigin[];
};
layout(std430, binding = 1) restrict writeonly buffer DirectionSSBO {
    vec4 rayDirection[];
};

void main() {
    float csEyeRayDirectionZ;
    Ray eyeRay;

    // These indices are out of bounds. If we don't clamp the x coordinate 
    // it wraps around and overwrites subsequent lines. So return early.
    if (gl_GlobalInvocationID.x >= g3d_FragCoordExtent.x) {
        return;
    }
    
#   if PROJECTION_ALGORITHM == PLANAR
        eyeRay = worldRay(gl_GlobalInvocationID.xy, camera.frame, camera.projInfo, csEyeRayDirectionZ);
#   elif PROJECTION_ALGORITHM == SPHERICAL
        vec2 angle = pi * (gl_GlobalInvocationID.xy - g3d_FragCoordExtent / 2) / g3d_FragCoordExtent.x;
        vec3 dir   = normalize(vec3(sin(angle.x), -sin(angle.y) * cos(angle.x), -cos(angle.x) * cos(angle.y)));
        eyeRay.direction = camera.frame * vec4(dir, 0);
        eyeRay.origin    = camera.frame * vec4(0,0,0,1);
#   else // LENSLET
        const float NUM_LENSES = 6;
        const float BASELINE = 8;
        vec2 unitCoord = (gl_GlobalInvocationID.xy - g3d_FragCoordExtent / 2) / g3d_FragCoordExtent.x;
        float2 lensCenter = round(unitCoord * NUM_LENSES) / NUM_LENSES;
        float2 lensCoord = (unitCoord - lensCenter) * NUM_LENSES;
        vec2 angle = pi * lensCoord;
        vec3 dir   = normalize(vec3(sin(angle.x), -sin(angle.y) * cos(angle.x), -cos(angle.x) * cos(angle.y)));
        eyeRay.direction = camera.frame * vec4(dir, 0);
        eyeRay.origin    = camera.frame * vec4(lensCenter * BASELINE, 0, 1);
#   endif

    const int index = (int)gl_GlobalInvocationID.y * (int)g3d_FragCoordExtent.x + (int)gl_GlobalInvocationID.x;

    rayOrigin[index] = vec4(eyeRay.origin, 0.0f);
    rayDirection[index] = vec4(eyeRay.direction, inf);
}

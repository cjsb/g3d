#version 410 or 420
/**
  \file data-files/shader/DefaultRenderer/DefaultRenderer_deferredShade.pix

  G3D Innovation Engine http://casual-effects.com/g3d
  Copyright 2000-2019, Morgan McGuire
  All rights reserved
  Available under the BSD License
*/
#include <compatibility.glsl>
#include <Light/Light.glsl>
#include <GBuffer/GBuffer.glsl>

uniform_GBuffer(gbuffer_);

#expect COMPUTE_PERCENT "Integer screen fraction percent (as a disk radius) within which to render AO. Used for VR. -1 to disable. 100 is a good, conservative result for VR. Smaller values are faster but can reveal edges during timewarp."

#include <deferredHelpers.glsl>
#include <LightingEnvironment/LightingEnvironment_LightUniforms.glsl>
#include <LightingEnvironment/LightingEnvironment_environmentMapUniforms.glsl>

#ifdef ambientOcclusion_notNull
    uniform_Texture(sampler2D, ambientOcclusion_);
    uniform ivec2              ambientOcclusion_offset;
#endif
        
#ifdef scatteredIndirectTexture_notNull
    uniform_Texture(sampler2D, scatteredIndirectTexture_);
#endif

out Color3 result;

void main() {
    // VR cropping
#   if COMPUTE_PERCENT > 0
        if (square(gl_FragCoord.x - g3d_FragCoordExtent.x * 0.5) + square(gl_FragCoord.y - g3d_FragCoordExtent.y * 0.5) > square(0.005 * float(COMPUTE_PERCENT) * max(g3d_FragCoordExtent.x, g3d_FragCoordExtent.y))) {
            discard;
        }
#   endif

    // Screen-space point being shaded
    ivec2 C = ivec2(gl_FragCoord.xy);
    Vector3 w_o;
    UniversalMaterialSample surfel;
    if (! readUniversalMaterialSampleFromGBuffer(C, false, true, w_o, surfel)) {
        result = surfel.emissive;
        return;
    }

    Radiance3 L_scatteredDirect = computeDirectLighting(surfel, w_o, 1.0);

    Radiance3 L_scatteredIndirect =
#       ifdef scatteredIndirectLightTexture_notNull
        texelFetch(C, scatteredIndirectLightTexture_buffer, 0).rgb;
#       else
        computeIndirectLighting(surfel, w_o, false, 0);
#       endif
   
    float AO =
#       ifdef ambientOcclusion_notNull
            (0.95 * texelFetch(ambientOcclusion_buffer, min(ivec2(gl_FragCoord.xy) + ambientOcclusion_offset, ivec2(ambientOcclusion_size.xy) - ivec2(1, 1)), 0).r + 0.05);
#       else
            1.0;
#       endif

    // How much ambient occlusion to apply to direct illumination (sort of approximates area lights,
    // more importantly: NPR term that adds local contrast)
    const float aoInfluenceOnDirectIllumination = 0.65;
    float directAO = lerp(1.0, AO, aoInfluenceOnDirectIllumination);

    result = surfel.emissive + L_scatteredDirect * directAO + L_scatteredIndirect * AO;
}
